from pyrogram import Client, filters
import os
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from pyrogram import filters
from pyrogram.types import Message
import time
import psutil
import platform
import logging
from config import OWNER_ID, BOT_USERNAME
from config import *
from COPYRIGHT2 import COPYRIGHT2 as app

import pyrogram
from pyrogram.errors import FloodWait


# ----------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------

# -------------------------------------------------------------------------------------


start_txt = """<b> ü§ñ Àπ C·¥è·¥ò è Ä…™…¢ ú·¥õ ‚úò R·¥á·¥ç·¥è·¥†·¥á Ä Àº üõ°Ô∏è </b>

üëã I'm your ùóß·¥áùòÖ·¥õ ùóß·¥á Ä·¥ç…™…¥·¥Ä·¥õ·¥è Ä , here to maintain a secure environment for our discussions.

üö´ ùóòùó±ùó∂ùòÅùó≤ùó± ùó†ùó≤ùòÄùòÄùóÆùó¥ùó≤ ùóóùó≤ùóπùó≤ùòÅùó∂ùóºùóª: ùóú'ùóπùóπ ùóøùó≤ùó∫ùóºùòÉùó≤ ùó≤ùó±ùó∂ùòÅùó≤ùó± ùó∫ùó≤ùòÄùòÄùóÆùó¥ùó≤ùòÄ ùòÅùóº ùó∫ùóÆùó∂ùóªùòÅùóÆùó∂ùóª ùòÅùóøùóÆùóªùòÄùóΩùóÆùóøùó≤ùóªùó∞ùòÜ.

üì£ ùó°ùóºùòÅùó∂ùó≥ùó∂ùó∞ùóÆùòÅùó∂ùóºùóªùòÄ: ùó¨ùóºùòÇ'ùóπùóπ ùóØùó≤ ùó∂ùóªùó≥ùóºùóøùó∫ùó≤ùó± ùó≤ùóÆùó∞ùòÅùó∂ùó∫ùó≤ ùòÅùó∂ùó∫ùó≤ ùóÆ ùó∫ùó≤ùòÄùòÄùóÆùó¥ùó≤ ùó∂ùòÄ ùó±ùó≤ùóπùó≤ùòÅùó≤ùó±.

üåü ùóöùó≤ùòÅ ùó¶ùòÅùóÆùóøùòÅùó≤ùó±:
1. Add me to your group.
2. I'll start protecting instantly.

‚û°Ô∏è Click on ùóîùó±ùó± ùó†ùó≤ ùóßùóº ùó¨ùóºùòÇùóø ùóöùóøùóºùòÇùóΩ to add me and keep our group safe ‚ö°"""

@app.on_message(filters.command("start"))
async def start(_, msg):
    buttons = [
        [ 
          InlineKeyboardButton("·¥Ä·¥Ö·¥Ö ·¥ç·¥á", url=f"https://t.me/{BOT_USERNAME}?startgroup=true")
        ],
        [
          InlineKeyboardButton("‚Ä¢  ú·¥Ä…¥·¥Ö ü·¥á Ä ‚Ä¢", callback_data="dil_back")
        ]]
    
    reply_markup = InlineKeyboardMarkup(buttons)
    
    await msg.reply_photo(
        photo="https://graph.org/file/d5d23e541737366550aef.jpg",
        caption=start_txt,
        reply_markup=reply_markup
    )


gd_buttons = [              
        [
            InlineKeyboardButton("·¥è·¥°…¥·¥á Ä", user_id=OWNER_ID),
            InlineKeyboardButton("s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url="https://t.me/GAURAV_BOTS"),    
        ]
        ]


# ------------------------------------------------------------------------------- #


@app.on_callback_query(filters.regex("dil_back"))
async def dil_back(_, query: CallbackQuery):
    await query.message.edit_caption(start_txt,
                                    reply_markup=InlineKeyboardMarkup(gd_buttons),)
        

# -------------------------------------------------------------------------------------


# -------------------------------------------------------------------------------------


start_time = time.time()

def time_formatter(milliseconds: float) -> str:
    seconds, milliseconds = divmod(milliseconds, 1000)
    minutes, seconds = divmod(seconds, 60)
    hours, minutes = divmod(minutes, 60)
    return f"{int(hours)}h {int(minutes)}m {int(seconds)}s"

def size_formatter(bytes: int) -> str:
    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
        if bytes < 1024.0:
            break
        bytes /= 1024.0
    return f"{bytes:.2f} {unit}"



@app.on_message(filters.command("ping"))
async def activevc(_, message: Message):
    uptime = time_formatter((time.time() - start_time) * 1000)
    cpu = psutil.cpu_percent()
    storage = psutil.disk_usage('/')

    python_version = platform.python_version()

    reply_text = (
        f"‚û™·¥ú·¥ò·¥õ…™·¥ç·¥á: {uptime}\n"
        f"‚û™·¥Ñ·¥ò·¥ú: {cpu}%\n"
        f"‚û™Íú±·¥õ·¥è Ä·¥Ä…¢·¥á: {size_formatter(storage.total)} [·¥õ·¥è·¥õ·¥Ä ü]\n"
        f"‚û™{size_formatter(storage.used)} [·¥ús·¥á·¥Ö]\n"
        f"‚û™{size_formatter(storage.free)} [“ì Ä·¥á·¥á]\n"
        f"‚û™·¥ò è·¥õ ú·¥è…¥ ·¥†·¥á Äs…™·¥è…¥: {python_version},"
    )

    await message.reply(reply_text, quote=True)


    
# -------------------------------------------------------------------------------------



FORBIDDEN_KEYWORDS = ["porn", "mitochondria" , "chemistry" , "velocity" , "modular" , "akash" , "physics" , "pwd" , "water" , "test series" , "minor" , "major" , "jee" , "neet" , "upse" , "bio" , "xxx", "sex", "NCERT", "XII", "page", "Ans", "meiotic", "divisions", "System.in", "Scanner", "void", "nextInt" "‚í∂', '‚í∑', '‚í∏', '‚íπ', '‚í∫', '‚íª', '‚íº', '‚íΩ', '‚íæ', '‚íø', '‚ìÄ', '‚ìÅ', '‚ìÇ', '‚ìÉ', '‚ìÑ','‚ìÖ', '‚ìÜ', '‚ìá', '‚ìà', '‚ìâ','‚ìä','‚ìã', '‚ìå', '‚ìç', '‚ìé', '‚ìè', '‚ë†', '‚ë°', '‚ë¢', '‚ë£', '‚ë§', '‚ë•', '‚ë¶', '‚ëß', '‚ë®', '‚ì™','üÖê', 'üÖë', 'üÖí', 'üÖì', 'üÖî', 'üÖï', 'üÖñ', 'üÖó', 'üÖò', 'üÖô', 'üÖö', 'üÖõ', 'üÖú', 'üÖù', 'üÖû','üÖü', 'üÖ†', 'üÖ°', 'üÖ¢', 'üÖ£','üÖ§','üÖ•', 'üÖ¶', 'üÖß', 'üÖ®', 'üÖ©', '‚ù∂', '‚ù∑', '‚ù∏', '‚ùπ', '‚ù∫', '‚ùª', '‚ùº', '‚ùΩ', '‚ùæ', '‚ìø','ùêÄ', 'ùêÅ', 'ùêÇ', 'ùêÉ', 'ùêÑ', 'ùêÖ', 'ùêÜ', 'ùêá', 'ùêà', 'ùêâ', 'ùêä', 'ùêã', 'ùêå', 'ùêç', 'ùêé','ùêè', 'ùêê', 'ùêë', 'ùêí', 'ùêì','ùêî','ùêï', 'ùêñ', 'ùêó', 'ùêò', 'ùêô', 'ùüè', 'ùüê', 'ùüë', 'ùüí', 'ùüì', 'ùüî', 'ùüï', 'ùüñ', 'ùüó', 'ùüé','ùï¨', 'ùï≠', 'ùïÆ', 'ùïØ', 'ùï∞', 'ùï±', 'ùï≤', 'ùï≥', 'ùï¥', 'ùïµ', 'ùï∂', 'ùï∑', 'ùï∏', 'ùïπ', 'ùï∫','ùïª', 'ùïº', 'ùïΩ', 'ùïæ', 'ùïø','ùñÄ','ùñÅ', 'ùñÇ', 'ùñÉ', 'ùñÑ', 'ùñÖ', 'ùüè', 'ùüê', 'ùüë', 'ùüí', 'ùüì', 'ùüî', 'ùüï', 'ùüñ', 'ùüó', 'ùüé','ùë®', 'ùë©', 'ùë™', 'ùë´', 'ùë¨', 'ùë≠', 'ùëÆ', 'ùëØ', 'ùë∞', 'ùë±', 'ùë≤', 'ùë≥', 'ùë¥', 'ùëµ', 'ùë∂','ùë∑', 'ùë∏', 'ùëπ', 'ùë∫', 'ùëª','ùëº','ùëΩ', 'ùëæ', 'ùëø', 'ùíÄ', 'ùíÅ', 'ùüè', 'ùüê', 'ùüë', 'ùüí', 'ùüì', 'ùüî', 'ùüï', 'ùüñ', 'ùüó', 'ùüé','ùìê', 'ùìë', 'ùìí', 'ùìì', 'ùìî', 'ùìï', 'ùìñ', 'ùìó', 'ùìò', 'ùìô', 'ùìö', 'ùìõ', 'ùìú', 'ùìù', 'ùìû','ùìü', 'ùì†', 'ùì°', 'ùì¢', 'ùì£','ùì§','ùì•', 'ùì¶', 'ùìß', 'ùì®', 'ùì©', 'ùüè', 'ùüê', 'ùüë', 'ùüí', 'ùüì', 'ùüî', 'ùüï', 'ùüñ', 'ùüó', 'ùüé','ùíú', 'ùêµ', 'ùíû', 'ùíü', 'ùê∏', 'ùêπ', 'ùí¢', 'ùêª', 'ùêº', 'ùí•', 'ùí¶', 'ùêø', 'ùëÄ', 'ùí©', 'ùí™','ùí´', 'ùí¨', 'ùëÖ', 'ùíÆ', 'ùíØ','ùí∞','ùí±', 'ùí≤', 'ùí≥', 'ùí¥', 'ùíµ','ùî∏', 'ùîπ', '‚ÑÇ', 'ùîª', 'ùîº', 'ùîΩ', 'ùîæ', '‚Ñç', 'ùïÄ', 'ùïÅ', 'ùïÇ', 'ùïÉ', 'ùïÑ', '‚Ñï', 'ùïÜ','‚Ñô', '‚Ñö', '‚Ñù', 'ùïä', 'ùïã','ùïå','ùïç', 'ùïé', 'ùïè', 'ùïê', '‚Ñ§', 'ùüô', 'ùüö', 'ùüõ', 'ùüú', 'ùüù', 'ùüû', 'ùüü', 'ùü†', 'ùü°', 'ùüò','ùô∞', 'ùô±', 'ùô≤', 'ùô≥', 'ùô¥', 'ùôµ', 'ùô∂', 'ùô∑', 'ùô∏', 'ùôπ', 'ùô∫', 'ùôª', 'ùôº', 'ùôΩ', 'ùôæ','ùôø', 'ùöÄ', 'ùöÅ', 'ùöÇ', 'ùöÉ','ùöÑ','ùöÖ', 'ùöÜ', 'ùöá', 'ùöà', 'ùöâ', 'ùü∑', 'ùü∏', 'ùüπ', 'ùü∫', 'ùüª', 'ùüº', 'ùüΩ', 'ùüæ', 'ùüø', 'ùü∂','ùóî', 'ùóï', 'ùóñ', 'ùóó', 'ùóò', 'ùóô', 'ùóö', 'ùóõ', 'ùóú', 'ùóù', 'ùóû', 'ùóü', 'ùó†', 'ùó°', 'ùó¢','ùó£', 'ùó§', 'ùó•', 'ùó¶', 'ùóß','ùó®','ùó©', 'ùó™', 'ùó´', 'ùó¨', 'ùó≠', 'ùü≠', 'ùüÆ', 'ùüØ', 'ùü∞', 'ùü±', 'ùü≤', 'ùü≥', 'ùü¥', 'ùüµ', 'ùü¨','ùòº', 'ùòΩ', 'ùòæ', 'ùòø', 'ùôÄ', 'ùôÅ', 'ùôÇ', 'ùôÉ', 'ùôÑ', 'ùôÖ', 'ùôÜ', 'ùôá', 'ùôà', 'ùôâ', 'ùôä','ùôã', 'ùôå', 'ùôç', 'ùôé', 'ùôè','ùôê','ùôë', 'ùôí', 'ùôì', 'ùôî', 'ùôï', 'ùü≠', 'ùüÆ', 'ùüØ', 'ùü∞', 'ùü±', 'ùü≤', 'ùü≥', 'ùü¥', 'ùüµ', 'ùü¨','ùòà', 'ùòâ', 'ùòä', 'ùòã', 'ùòå', 'ùòç', 'ùòé', 'ùòè', 'ùòê', 'ùòë', 'ùòí', 'ùòì', 'ùòî', 'ùòï', 'ùòñ','ùòó', 'ùòò', 'ùòô', 'ùòö', 'ùòõ','ùòú','ùòù', 'ùòû', 'ùòü', 'ùò†', 'ùò°', 'ùü£', 'ùü§', 'ùü•', 'ùü¶', 'ùüß', 'ùü®', 'ùü©', 'ùü™', 'ùü´', 'ùü¢','üÑ∞', 'üÑ±', 'üÑ≤', 'üÑ≥', 'üÑ¥', 'üÑµ', 'üÑ∂', 'üÑ∑', 'üÑ∏', 'üÑπ', 'üÑ∫', 'üÑª', 'üÑº', 'üÑΩ', 'üÑæ','üÑø', 'üÖÄ', 'üÖÅ', 'üÖÇ', 'üÖÉ','üÖÑ','üÖÖ', 'üÖÜ', 'üÖá', 'üÖà', 'üÖâ','üÖ∞', 'üÖ±', 'üÖ≤', 'üÖ≥', 'üÖ¥', 'üÖµ', 'üÖ∂', 'üÖ∑', 'üÖ∏', 'üÖπ', 'üÖ∫', 'üÖª', 'üÖº', 'üÖΩ', 'üÖæ','üÖø', 'üÜÄ', 'üÜÅ', 'üÜÇ', 'üÜÉ','üÜÑ','üÜÖ', 'üÜÜ', 'üÜá', 'üÜà', 'üÜâ','üá¶', 'üáß', 'üá®', 'üá©', 'üá™', 'üá´', 'üá¨', 'üá≠', 'üáÆ', 'üáØ', 'üá∞', 'üá±', 'üá≤', 'üá≥', 'üá¥','üáµ', 'üá∂', 'üá∑', 'üá∏', 'üáπ','üá∫','üáª', 'üáº', 'üáΩ', 'üáæ', 'üáø','ùîÑ', 'ùîÖ', '‚Ñ≠', 'ùîá', 'ùîà', 'ùîâ', 'ùîä', '‚Ñå', '‚Ñë', 'ùîç', 'ùîé', 'ùîè', 'ùîê', 'ùîë', 'ùîí','ùîì', 'ùîî', '‚Ñú', 'ùîñ', 'ùîó','ùîò','ùîô', 'ùîö', 'ùîõ', 'ùîú', '‚Ñ®','‚Çê', '·µ¶', 'ÍúÄ', 'd', '‚Çë', 'f', '‚Çâ', '‚Çï', '·µ¢', '‚±º', '‚Çñ', '‚Çó', '‚Çò', '‚Çô', '‚Çí','‚Çö', 'q', '·µ£', '‚Çõ', '‚Çú','·µ§','·µ•', 'w', '‚Çì', '·µß', '‚ÇÇ', '‚ÇÅ', '‚ÇÇ', '‚ÇÉ', '‚ÇÑ', '‚ÇÖ', '‚ÇÜ', '‚Çá', '‚Çà', '‚Çâ', '‚ÇÄ','·àç', '·åå', '·à≠', '·ãï', '·âø', '·âª', '·äó', '·ãò', '·åé', '·åã', '·åï', '·à®', '·å†', '·ä≠', '·ãê','·ã®', '·ãí', '·ã™', '·äê', '·çï','·àÅ','·àÄ', '·à†', '·à∏', '·àÉ', '·åä', 'À¶', 'œ®', '’Ö', 'œ§', '∆º', 'Œ¥', 'êíá', 'œê', '∆ç', 'Œ∏','Ôæë', '‰πÉ', 'c', 'd', '‰πá', 'ÔΩ∑', 'g', '„Çì', 'Ôæâ', 'Ôæå', '„Ç∫', 'Ôæö', 'Ôæ∂', 'ÂàÄ', 'o','ÔΩ±', 'q', 'Â∞∫', '‰∏Ç', 'ÔΩ≤','u','‚àö', 'w', 'Ôæí', 'Ôæò', '‰πô', '‚•ë', '’ª', '·É≥', ' Æ', '“ï', 'œ≠', '‚Åä', '·Éñ', 'ùöê', '‚óã', '‚ìµ', '‚ì∂', '‚ì∑', '‚ì∏', '‚ìπ', '‚ì∫', '‚ìª', '‚ìº', '‚ìΩ','ùóî', 'ùóï', 'ùóñ', 'ùóó', 'ùóò', 'ùóô', 'ùóö', 'ùóõ', 'ùóú', 'ùóù', 'ùóû', 'ùóü', 'ùó†', 'ùó°', 'ùó¢', 'ùó£', 'ùó§', 'ùó•', 'ùó¶', 'ùóß', 'ùó®', 'ùó©', 'ùó™', 'ùó´', 'ùó¨', 'ùó≠', '√ÑÃà', '√ü', '√áÃß', '√ê', '√à', '¬£', 'G', '√å', '√±', '√ñ', '√æ', 'Q', '¬ß', '‚Ä†', '√ö', '√ó', '…é', 'Œ±', '·Ç¶', '∆à', '‘É', '“Ω', 'œù', '…†', '‘ã', 'Œπ', ' ù', '∆ô', ' Ö', '…±', '…≥', 'œÉ', 'œÅ', 'œô', '…æ', ' Ç', '∆ö', 'œÖ', ' ã', '…Ø', 'x', '·Éß', '»•', 'üÖ∞', 'üÖ±', 'üÖ≤', 'üÖ≥', 'üÖ¥', 'üÖµ', 'üÖ∂', 'üÖ∑', 'üÖ∏', 'üÖπ', 'üÖ∫', 'üÖª', 'üÖº', 'üÖΩ', 'üÖæ', 'üÖø', 'üÜÄ', 'üÜÅ', 'üÜÇ', 'üÜÉ', 'üÜÑ', 'üÜÖ', 'üÜÜ', 'üÜá', 'üÜà', 'üÜâ', '·éØ', '·è∞', '·è®', '·é†', '·é¨', '·é∞', '·é∂', '·éª', '·é®', '·è†', '·è¶', '·èù', '·é∑', '·èÅ', '·éæ', '·è¢', '·èÖ', '·èí', '·èï', '·éø', '·è¨', '·èâ', '·èØ', '·é≤', '·éΩ', '·èÉ', 'üÖê', 'üÖë', 'üÖí', 'üÖì', 'üÖî', 'üÖï', 'üÖñ', 'üÖó', 'üÖò', 'üÖô', 'üÖö', 'üÖõ', 'üÖú', 'üÖù', 'üÖû', 'üÖü', 'üÖ†', 'üÖ°', 'üÖ¢', 'üÖ£', 'üÖ§', 'üÖ•', 'üÖ¶', 'üÖß', 'üÖ®', 'üÖ©', 'ùîÑ', 'ùîÖ', '‚Ñ≠', 'ùîá', 'ùîà', 'ùîâ', 'ùîä', '‚Ñå', '‚Ñë', 'ùîç', 'ùîé', 'ùîè', 'ùîê', 'ùîë', 'ùîí', 'ùîì', 'ùîî', '‚Ñú', 'ùîñ', 'ùîó', 'ùîò', 'ùîô', 'ùîö', 'ùîõ', 'ùîú', '‚Ñ®', 'ùî§', 'ùî•', 'ùî¶', 'ùîß', 'ùî®', 'ùî©', 'ùî™', 'ùî´', 'ùî¨', 'ùî≠', 'ùîÆ', 'ùîØ', 'ùî∞', 'ùî±', 'ùî≤', 'ùî≥', 'ùî¥', 'ùîµ', 'ùî∂', 'ùî∑','‚ìê', '‚ìë', '‚ìí', '‚ìì', '‚ìî', '‚ìï', '‚ìñ', '‚ìó', '‚ìò', '‚ìô', '‚ìö', '‚ìõ', '‚ìú', '‚ìù', '‚ìû', '‚ìü', '‚ì†', '‚ì°', '‚ì¢', '‚ì£', '‚ì§', '‚ì•', '‚ì¶', '‚ìß', '‚ì®', '‚ì©', '‚í∂', '‚í∑', '‚í∏', '‚íπ', '‚í∫', '‚íª', '‚íº', '‚íΩ', '‚íæ', '‚íø', '‚ìÄ', '‚ìÅ', '‚ìÇ', '‚ìÉ', '‚ìÑ', '‚ìÖ', '‚ìÜ', '‚ìá', '‚ìà', '‚ìâ', '‚ìä', '‚ìã', '‚ìå', '‚ìç', '‚ìé', '‚ìè', '‚Ç≥', '‡∏ø', '‚Çµ', 'ƒê', '…Ü', '‚Ç£', '‚Ç≤', '‚±ß', '≈Ç', 'J', '‚Ç≠', '‚±†', '‚Ç•', '‚Ç¶', '√ò', '‚Ç±', 'Q', '‚±§', '‚Ç¥', '‚ÇÆ', '…Ñ', 'V', '‚Ç©', '”æ', '…é', '‚±´', 'ùòà', 'ùòâ', 'ùòä', 'ùòã', 'ùòå', 'ùòç', 'ùòé', 'ùòè', 'ùòê', 'ùòë', 'ùòí', 'ùòì', 'ùòî', 'ùòï', 'ùòñ', 'ùòó', 'ùòò', 'ùòô', 'ùòö', 'ùòõ', 'ùòú', 'ùòù', 'ùòû', 'ùòü', 'ùò†', 'ùò°', 'ùò¢', 'ùò£', 'ùò§', 'ùò•', 'ùò¶', 'ùòß', 'ùò®', 'ùò©', 'ùò™', 'ùò´', 'ùò¨', 'ùò≠', 'ùòÆ', 'ùòØ', 'ùò∞', 'ùò±', 'ùò≤', 'ùò≥', 'ùò¥', 'ùòµ', 'ùò∂', 'ùò∑', 'ùò∏', 'ùòπ', 'ùò∫', 'ùòª' ]

@app.on_message()
async def handle_message(client, message):
    if any(keyword in message.text for keyword in FORBIDDEN_KEYWORDS):
        logging.info(f"Deleting message with ID {message.id}")
        await message.delete()
      #  user_mention = from_user.mention
        await message.reply_text(f"@{message.from_user.username} ùñ£ùóàùóá'ùóç ùóåùñæùóáùñΩ ùóáùñæùóëùóç ùóçùóÇùóÜùñæ!")
    elif any(keyword in message.caption for keyword in FORBIDDEN_KEYWORDS):
        logging.info(f"Deleting message with ID {message.id}")
        await message.delete()
       # user_mention = from_user.mention
        await message.reply_text(f"@{message.from_user.username} ùñ£ùóàùóá'ùóç ùóåùñæùóáùñΩ ùóáùñæùóëùóç ùóçùóÇùóÜùñæ!")
        
        
# -------------------------------------------------------------------------------------
# -------------------------------------------------------------------------------------
@app.on_edited_message(filters.group & ~filters.me)
async def delete_edited_messages(client, edited_message):
    await edited_message.delete()
    #  user_mention = from_user.mention
        await message.reply_text(f"@{message.from_user.username} just edited a message and i delete it ü§°ü§°")



# ----------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------
def delete_long_messages(_, m):
    return len(m.text.split()) > 400

@app.on_message(filters.group & filters.private & delete_long_messages)
async def delete_and_reply(_, msg):
    await msg.delete()
    user_mention = msg.from_user.mention
    await app.send_message(msg.chat.id, f"Hey {user_mention}, please keep your messages short!")
    

# -----------------------------------------------------------------------------------


    
@app.on_message(filters.animation | filters.audio | filters.document | filters.photo | filters.sticker | filters.video)
async def keep_reaction_message(client, message: Message):
    pass 
# -------------------------------

async def delete_pdf_files(client, message):
    if message.document and message.document.mime_type == "application/pdf":
        warning_message = f"@{message.from_user.username} ·¥ç·¥Ä·¥Ä ·¥ç·¥Ä·¥õ ·¥Ñ ú·¥ú·¥Ö·¥Ä ·¥ò·¥Ö“ì  ô ú·¥á·¥ä ·¥ã·¥á,\n  ô ú·¥ès·¥Ä·¥Ö…™·¥ã·¥á ·¥Ñ·¥è·¥ò è Ä…™…¢ ú·¥õ  ü·¥Ä…¢ è·¥á…¢·¥Ä \n\n ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥ã·¥Ä Ä ·¥Ö…™ è·¥Ä ·¥ç·¥Ä·¥Ö·¥Ä Ä·¥Ñ ú·¥è·¥Ö.\n\n ·¥Ä ô @iam_daxx  ô ú·¥Ä…™ ·¥ã·¥á ·¥Ö·¥ç ·¥ç·¥á ·¥Ä·¥ò…¥…™ ·¥ç·¥ú·¥ç·¥ç è ·¥ã·¥è  ô ú·¥á·¥ä ·¥Ö·¥á üçåüçåüçå."
        await message.reply_text(warning_message)
        await message.delete()
    else:  
        pass

@app.on_message(filters.group & filters.document)
async def message_handler(client, message):
    await delete_pdf_files(client, message)

# ----------------------------------------
